{
    "pipes": [],
    "interfaces": [
        {
            "name": "LjkFormControl",
            "id": "interface-LjkFormControl-50e8db996efc5e5307517ad9d95a5c0f26317f83837aeddbe6807b0fd06e997675ee8ec7828758f6ebda693f0700d54afdbc882a403c29cf6a59735dc07aabe8",
            "file": "projects/lukejamesk/core/src/lib/forms/core/models/LjkFormControl.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ControlValueAccessor } from \"@angular/forms\";\n\nexport interface LjkFormControl<T> extends ControlValueAccessor {\n  label: string;\n  id: string;\n  name: string;\n  required: boolean;\n  disabled?: boolean;\n  value: T;\n\n  writeValue: (value: T) => void;\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "writeValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "ControlValueAccessor"
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-1e58c3b78d781cb56357eccd289eca71209bc1b5a758a8b28d3da91059f960f7d8fcdf331bc32949972ce38bb7f58386e991a90ba3a3c579fd399a8c9efd430e",
            "file": "projects/lukejamesk/core/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ButtonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IconName } from '../icon/icon.component';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'tertiary';\n@Component({\n  selector: 'ljk-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent  {\n  @Input() icon?: IconName;\n  @Input() variant: ButtonVariant = 'primary';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".button {\n  @apply\n    py-xs\n    px-s\n    border\n    border-transparent\n    font-medium\n    flex\n    gap-xs\n    rounded-md\n}\n\n.button-primary {\n  @apply\n    bg-primary-default\n    text-primary-contrast-high\n    shadow-sm\n}\n\n.button-primary:hover {\n  @apply\n    bg-primary-contrast-low\n}\n\n.button-secondary {\n  @apply\n    border-primary-default\n    text-primary-default\n}\n\n.button-secondary:hover {\n  @apply\n    border-primary-contrast-low\n    text-primary-contrast-low\n}\n\n.button-tertiary {\n  @apply text-primary-default\n}\n\n.button-tertiary:hover {\n  @apply\n    text-primary-contrast-low\n}\n\n",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<button [class]=\"'button button-' + variant\">\n  <ljk-icon *ngIf=\"icon\" [name]=\"icon\"></ljk-icon>\n  <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "ExpanderBodyComponent",
            "id": "component-ExpanderBodyComponent-9712d33199ff90376ead4b3c9ab5ec124d40ab9cd0a376700d8f84fd6ae532afa5c34e6c468fade0b20ed94a5643f4d3275884b2fd4c592f8a1cf3548ac578af",
            "file": "projects/lukejamesk/core/src/lib/expander/expander-body.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-expander-body",
            "styleUrls": [
                "./expander-body.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./expander-body.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ljk-expander-body',\n  templateUrl: './expander-body.component.html',\n  styleUrls: ['./expander-body.component.css'],\n})\nexport class ExpanderBodyComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  @apply pt-m pb-m;\n}\n",
                    "styleUrl": "./expander-body.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "ExpanderComponent",
            "id": "component-ExpanderComponent-c13efa4d7283269e31db42ff49eea0fc466f45eba536c1385c41dc7f7e3cb5ddb5a5808c6ead6f848132118ee3a9e1b42d756ecb67154c0ccbf6b0763c54569e",
            "file": "projects/lukejamesk/core/src/lib/expander/expander.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-expander",
            "styleUrls": [
                "./expander.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./expander.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'ljk-expander',\n  templateUrl: './expander.component.html',\n  styleUrls: ['./expander.component.css'],\n})\nexport class ExpanderComponent {\n  @Input() open = false;\n  @Input() id = '';\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  get ariaLabelId() {\n    return `Expander-${this.id}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ljk-expander {\n  @apply w-full block;\n}\n",
                    "styleUrl": "./expander.component.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "ariaLabelId": {
                    "name": "ariaLabelId",
                    "getSignature": {
                        "name": "ariaLabelId",
                        "type": "",
                        "returnType": "",
                        "line": 13
                    }
                }
            },
            "templateData": "<div class=\"ljk-expander\">\n  <ng-content select=\"ljk-expander-header\"></ng-content>\n  <div [attr.aria-labelledby]=\"ariaLabelId\">\n    <ng-content *ngIf=\"open\"></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "ExpanderHeaderComponent",
            "id": "component-ExpanderHeaderComponent-def7257fad63e150e34fa7a72b69e5c2b6536cf0bfd5d2c689aa66449485daa7e81423c5c4939d8913ef19f9b1bf14d7b0369fd6a99dbe595f4b42954784e9c5",
            "file": "projects/lukejamesk/core/src/lib/expander/expander-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-expander-header",
            "styleUrls": [
                "./expander-header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./expander-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "expander",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExpanderComponent",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "Host",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "doToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Host } from '@angular/core';\nimport { ExpanderComponent } from '../expander/expander.component';\n\n@Component({\n  selector: 'ljk-expander-header',\n  templateUrl: './expander-header.component.html',\n  styleUrls: ['./expander-header.component.css'],\n})\nexport class ExpanderHeaderComponent {\n  constructor(\n    @Host() public expander: ExpanderComponent\n  ) { }\n  doToggle() {\n    this.expander.openChange.emit(!this.expander.open);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  @apply\n    w-full\n    block\n    pt-s\n    pb-s\n    text-left\n    rounded-md;\n}\n\nbutton:hover {\n  @apply text-primary-default;\n}\n\n.open-indicator {\n  @apply ml-s;\n}\n",
                    "styleUrl": "./expander-header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "expander",
                        "type": "ExpanderComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "expander",
                        "type": "ExpanderComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button\n  expanderHeader\n  (click)=\"doToggle()\"\n  [attr.aria-expanded]=\"expander.open\"\n  [attr.aria-controls]=\"expander.ariaLabelId\"\n>\n  <div class=\"h3\">\n    <span>\n      <ng-content></ng-content>\n    </span>\n    <ljk-icon class=\"open-indicator\" [name]=\"expander.open ? 'chevron-up' : 'chevron-down'\"></ljk-icon>\n  </div>\n</button>\n"
        },
        {
            "name": "GridColComponent",
            "id": "component-GridColComponent-d831469ee3f97b8c154fd79dc5961f931256c4fb0c330281f04a686324c2f79ef7ca6531b2b7df7e38d44365ded6794f092db0ffb4e474c8bdf95b4a0d17aa0a",
            "file": "projects/lukejamesk/core/src/lib/grid/grid-col.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-grid-col",
            "styleUrls": [
                "./grid-col.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./grid-col.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "span",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ColumnSpan",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input } from '@angular/core';\n\ntype ColumnSpan = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 |\n  '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '10' | '11' | '12';\n\n@Component({\n  selector: 'ljk-grid-col',\n  templateUrl: './grid-col.component.html',\n  styleUrls: ['./grid-col.component.scss']\n})\nexport class GridColComponent {\n  @Input() public span: ColumnSpan = 1\n\n  @HostBinding('class') get hostClasses() {\n    return `span-${this.span}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  @apply text-left;\n\n  &.span-1 {\n    @apply col-span-1;\n  }\n  &.span-2 {\n    @apply col-span-2;\n  }\n  &.span-3 {\n    @apply col-span-3;\n  }\n  &.span-4 {\n    @apply col-span-4;\n  }\n  &.span-5 {\n    @apply col-span-5;\n  }\n  &.span-6 {\n    @apply col-span-6;\n  }\n  &.span-7 {\n    @apply col-span-7;\n  }\n  &.span-8 {\n    @apply col-span-8;\n  }\n  &.span-9 {\n    @apply col-span-9;\n  }\n  &.span-10 {\n    @apply col-span-10;\n  }\n  &.span-11 {\n    @apply col-span-11;\n  }\n  &.span-12 {\n    @apply col-span-12;\n  }\n}\n",
                    "styleUrl": "./grid-col.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "hostClasses": {
                    "name": "hostClasses",
                    "getSignature": {
                        "name": "hostClasses",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "GridComponent",
            "id": "component-GridComponent-484e9f659f499ed9d648f166244374ee99fc76ac0beb0dab5eafb2b62c503c39f99080102b63b2b7bcf53374cdc89f1e7e3caef36cca4c6cf10fe89ca5d6afab",
            "file": "projects/lukejamesk/core/src/lib/grid/grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-grid",
            "styleUrls": [
                "./grid.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./grid.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ljk-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.css']\n})\nexport class GridComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  @apply grid grid-cols-12 gap-l;\n}\n",
                    "styleUrl": "./grid.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-318e30dcab57d6b6112be0c30d4679c535e024f9b10afc69a13b89aaeb979a6c1d99eba1afda8df146e8eeb6992251206b0ff4825b537caa0aaec0fe923f70d9",
            "file": "projects/lukejamesk/core/src/lib/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-icon",
            "styleUrls": [
                "./icon.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "IconName",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "IconSize",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FaIconLibrary } from '@fortawesome/angular-fontawesome';\nimport { fas, IconName as fasIconName } from '@fortawesome/free-solid-svg-icons';\n\nexport type IconSize = 'auto' | 's' | 'm' |'l';\nexport type IconName = fasIconName;\n\n@Component({\n  selector: 'ljk-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.css']\n})\nexport class IconComponent {\n  @Input() name: IconName\n  @Input() size: IconSize = 'auto'\n\n  constructor(\n    library: FaIconLibrary\n  ) {\n    library.addIconPacks(fas)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ljk-icon {\n  display: inline-block;\n}\n\n.size-s {\n  @apply text-sm leading-none\n}\n\n.size-m {\n  @apply text-base leading-none\n}\n\n.size-l {\n  @apply text-lg leading-none\n}\n",
                    "styleUrl": "./icon.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "library",
                        "type": "FaIconLibrary",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "library",
                        "type": "FaIconLibrary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<span [class]=\"'ljk-icon size-' + size\">\n  <fa-icon [icon]=\"name\" ></fa-icon>\n</span>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-89fcaf4457592ff93f03c188e1945e8d1a3420a008e3f6e2a1692a031b42f2cd876b1a806d92436ac78fb76c33b51b98065281a8bd799858966835e97d6b8099",
            "file": "projects/lukejamesk/core/src/lib/forms/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "ljk-input",
            "styleUrls": [
                "./input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, OnInit, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { LjkFormControl } from '../core/models/LjkFormControl';\n\n\n@Component({\n  selector: 'ljk-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.css'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]\n})\nexport class InputComponent implements LjkFormControl<string> {\n  @Input() label!: string;\n  @Input() required!: boolean;\n  @Input() value!: string;\n  @Input() disabled!: boolean;\n  @Input() id!: string;\n  @Input() name!: string;\n\n  onChange: any = () => {};\n  onTouch: any = () => {};\n\n  writeValue(value: string) {\n    console.log(value)\n    this.value = value;\n  }\n\n  registerOnChange(fn: unknown): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: unknown): void {\n    this.onTouch = fn;\n  }\n\n  updateChanges(): void {\n    this.onChange(this.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input {\n  @apply\n    pb-xs\n    pt-xs\n    border-b-2\n    border-y-background-contrast-low\n    w-full\n    outline-none\n}\n",
                    "styleUrl": "./input.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "LjkFormControl"
            ],
            "templateData": "\n<ljk-label [for]=\"id\" [required]=\"required\">\n  {{label}}\n</ljk-label>\n<input\n  [id]=\"id\"\n  [name]=\"name\"\n  type=\"text\"\n  [(ngModel)]=\"value\"\n  (ngModelChange)=\"updateChanges()\"\n/>\n"
        },
        {
            "name": "LabelComponent",
            "id": "component-LabelComponent-7c9f8c0eef8992b8012d943c1621453ea3ed1d647c57771d2bde8d82f5b00b543b8a7cad55e419a89fde6204a3e9463f4548e5d0adc342a0921ca5831e6ba28d",
            "file": "projects/lukejamesk/core/src/lib/forms/label/label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-label",
            "styleUrls": [
                "./label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "for",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'ljk-label',\n  templateUrl: './label.component.html',\n  styleUrls: ['./label.component.css']\n})\nexport class LabelComponent  {\n  @Input() for!: string;\n  @Input() required!: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./label.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<p>label works!</p>\n"
        },
        {
            "name": "ModalComponent",
            "id": "component-ModalComponent-afdc0604e9065a08d23e0432db69cbd8fb910a0bbab2c56db483da37f2b75dc994383cb58c46bdb24b3a39b99da9870eb96ad579a780da8d310bca95340f1eb9",
            "file": "projects/lukejamesk/core/src/lib/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-modal",
            "styleUrls": [
                "./modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hasMounted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "modalTemplateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'modalTemplate'"
                        }
                    ]
                },
                {
                    "name": "portalHost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomPortalOutlet",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ApplicationRef,\n  Component,\n  ComponentFactoryResolver,\n  EventEmitter,\n  Injector,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { DomPortalOutlet, TemplatePortal } from '@angular/cdk/portal';\n\n@Component({\n  selector: 'ljk-modal',\n  templateUrl: './modal.component.html',\n  styleUrls: ['./modal.component.css']\n})\nexport class ModalComponent implements AfterViewInit, OnChanges {\n  @ViewChild('modalTemplate') modalTemplateRef!: TemplateRef<any>;\n  @Input() open = false;\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n  private hasMounted = false;\n  private portalHost!: DomPortalOutlet;\n\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n    private appRef: ApplicationRef,\n    private viewContainerRef: ViewContainerRef,\n  ) {\n\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['open'].currentValue === true) {\n      this.openModal();\n    } else {\n      this.closeModal();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.hasMounted = true;\n    if(this.open) {\n      this.openModal();\n    }\n  }\n\n  private closeModal() {\n    if (this.portalHost?.hasAttached()) {\n      this.portalHost.detach();\n    }\n  }\n\n  private openModal() {\n    if (this.hasMounted === true && !this.portalHost?.hasAttached()) {\n      this.portalHost = new DomPortalOutlet(\n        document.body,\n        this.componentFactoryResolver,\n        this.appRef,\n        this.injector,\n      );\n\n      const templatePortal = new TemplatePortal(this.modalTemplateRef, this.viewContainerRef);\n      if (this.open) {\n        this.portalHost.attach(templatePortal);\n      }\n    }\n  }\n\n  close(): void {\n    this.openChange.emit(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ljk-modal {\n  @apply\n    fixed\n    w-full\n    h-full\n    top-0\n    left-0\n    flex\n    items-start\n    justify-center\n    overflow-y-auto\n    max-h-screen\n    p-m\n}\n\n.ljk-modal-content {\n  @apply\n    bg-background-default\n    mx-auto\n    rounded\n    shadow-lg\n    z-50\n    w-full\n    max-w-xl\n}\n\n.ljk-curtain {\n  @apply\n    fixed\n    w-full\n    h-full\n    bg-black\n    opacity-50\n    inset-0\n}\n",
                    "styleUrl": "./modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ],
            "templateData": "<ng-template #modalTemplate>\n  <ljk-theme theme=\"light\">\n    <div class=\"ljk-modal\" *ngIf=\"open\">\n      <div class=\"ljk-curtain\" (click)=\"close()\"></div>\n      <div class=\"ljk-modal-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </ljk-theme>\n</ng-template>\n"
        },
        {
            "name": "PanelComponent",
            "id": "component-PanelComponent-120a4c6dd83207cd64960ff03129f14d9d0b3643e00e6eef60fb1cc776bf40b9c0d0134d7b1b1274c2720fea1790f6300dc178db638ed0253f5ecda5ce393a25",
            "file": "projects/lukejamesk/core/src/lib/panel/panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-panel",
            "styleUrls": [
                "./panel.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./panel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ljk-panel',\n  templateUrl: './panel.component.html',\n  styleUrls: ['./panel.component.css']\n})\nexport class PanelComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".panel {\n  @apply\n    p-s\n    border\n    border-background-contrast-vlow\n    rounded-md\n    text-text-default\n    bg-background-default;\n}\n",
                    "styleUrl": "./panel.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"panel\">\n  <ng-content>\n\n  </ng-content>\n</div>\n"
        },
        {
            "name": "PlateComponent",
            "id": "component-PlateComponent-0a0fd31e51d05b1c59103122692c63aa99ac7592e7a166cf866f527d55526966a9de9623e12f9f17fb5bba8144de55135714d7881cf877be9ca6782ff60fec06",
            "file": "projects/lukejamesk/core/src/lib/plate/plate.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-plate",
            "styleUrls": [
                "./plate.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./plate.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "plate",
                    "defaultValue": "'1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Plate",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Optional, SkipSelf } from '@angular/core';\nimport { Theme } from '../theme/theme.component';\nimport { Plate } from './types';\n\n\n@Component({\n  selector: 'ljk-plate',\n  templateUrl: './plate.component.html',\n  styleUrls: ['./plate.component.css']\n})\nexport class PlateComponent {\n  public plate: Plate = '1';\n\n  get themeClass (): Theme {\n    return `plate-${this.plate}`;\n  }\n\n  constructor(\n    @Optional() @SkipSelf() parentPlate: PlateComponent\n  ) {\n    if (parentPlate?.plate === '1') {\n      this.plate = '2'\n    } else {\n      this.plate = '1'\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plate.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "parentPlate",
                        "type": "PlateComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "parentPlate",
                        "type": "PlateComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "themeClass": {
                    "name": "themeClass",
                    "getSignature": {
                        "name": "themeClass",
                        "type": "",
                        "returnType": "Theme",
                        "line": 14
                    }
                }
            },
            "templateData": "\n<ljk-theme [theme]=\"themeClass\">\n  <ng-content></ng-content>\n</ljk-theme>\n"
        },
        {
            "name": "ThemeComponent",
            "id": "component-ThemeComponent-674be956ed47d041ef035b5ec3bbaeee01f9aefb9125682a8e8c7f01239793a00c00df34651dcbf8588bd67c1827cde42048ea5c0baff735a60efdae5fc33b43",
            "file": "projects/lukejamesk/core/src/lib/theme/theme.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ljk-theme",
            "styleUrls": [
                "./theme.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./theme.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "theme",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Theme",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nexport type Theme = 'light' | 'dark' | 'plate-1' | 'plate-2';\n\n@Component({\n  selector: 'ljk-theme',\n  templateUrl: './theme.component.html',\n  styleUrls: ['./theme.component.css']\n})\nexport class ThemeComponent {\n  @Input() public theme: Theme = 'light';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".theme-light {\n  --bg: var(--white);\n  --bg-high-contrast: var(--black);\n  --bg-low-contrast: var(--gray-300);\n  --bg-very-low-contrast: var(--gray-100);\n\n  --text: var(--gray-800);\n\n  --primary: var(--brand-day);\n  --primary-high-contrast: var(--white);\n  --primary-low-contrast: var(--brand-day-light);\n}\n\n:host-context(.theme-light) .theme-plate-1 {\n  --bg: var(--gray-100);\n  --bg-high-contrast: var(--black);\n  --bg-low-contrast: var(--gray-400);\n  --bg-very-low-contrast: var(--gray-200);\n}\n\n:host-context(.theme-light) .theme-plate-2 {\n  --bg: var(--gray-200);\n  --bg-high-contrast: var(--black);\n  --bg-low-contrast: var(--gray-500);\n  --bg-very-low-contrast: var(--gray-300);\n}\n\n.theme-dark {\n  --bg: var(--black);\n  --bg-high-contrast: var(--black);\n  --bg-low-contrast: var(--gray-600);\n  --bg-very-low-contrast: var(--gray-900);\n\n  --text: var(--gray-200);\n\n  --primary: var(--brand-night);\n  --primary-high-contrast: var(--white);\n  --primary-low-contrast: var(--brand-night-light);\n}\n\n:host-context(.theme-dark) .theme-plate-1 {\n  --bg: var(--gray-900);\n  --bg-high-contrast: var(--black);\n  --bg-low-contrast: var(--gray-500);\n  --bg-very-low-contrast: var(--gray-800);\n}\n\n:host-context(.theme-dark) .theme-plate-2 {\n  --bg: var(--gray-800);\n  --bg-high-contrast: var(--black);\n  --bg-low-contrast: var(--gray-400);\n  --bg-very-low-contrast: var(--gray-700);\n}\n",
                    "styleUrl": "./theme.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div [attr.class]=\"'theme-'+theme\">\n  <ng-content></ng-content>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-8111d5cac3e14ec60e6d126eefee59f0955aef6ed7dab8af17cfacfe4117eabefd057a4bcb8fd58a447ab213db8756f912d1a8bb6898f15249cff34263e9bcd1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonComponent } from './button.component';\nimport { IconModule } from '../icon/icon.module';\n\n@NgModule({\n  declarations: [\n    ButtonComponent,\n  ],\n  imports: [\n    CommonModule,\n    IconModule,\n  ],\n  exports: [\n    ButtonComponent,\n  ],\n})\nexport class ButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-56580cea1ff9c5a96ef73381edda3525081f2598088edb9fb63e30abcd9f6d9f5c924594532b2dec7b9288cdac322d0ce7b895abe74223faf87f8d3ff88fe638",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExpanderModule } from './expander/expander.module';\nimport { GridModule } from './grid/grid.module';\nimport { PanelModule } from './panel/panel.module';\nimport { ButtonModule } from './button/button.module';\nimport { ThemeModule } from './theme/theme.module';\nimport { IconModule } from './icon/icon.module';\nimport { ModalModule } from './modal/modal.module';\nimport { FormsModule } from './forms/forms.module';\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n    ButtonModule,\n    ExpanderModule,\n    FormsModule,\n    GridModule,\n    IconModule,\n    ModalModule,\n    PanelModule,\n    ThemeModule\n  ],\n})\nexport class CoreModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "ExpanderModule"
                        },
                        {
                            "name": "FormsModule"
                        },
                        {
                            "name": "GridModule"
                        },
                        {
                            "name": "IconModule"
                        },
                        {
                            "name": "ModalModule"
                        },
                        {
                            "name": "PanelModule"
                        },
                        {
                            "name": "ThemeModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExpanderModule",
            "id": "module-ExpanderModule-ba0d793d7e27498fcc120c5aba96a0fbfdea2cda3e303c5580272b9ddde39154a0893ceec8827f7bc6dccce77210a3185501ecdd7a3596f8730741a762b6c959",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/expander/expander.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ExpanderComponent } from './expander.component';\nimport { ExpanderHeaderComponent } from './expander-header.component';\nimport { ExpanderBodyComponent } from './expander-body.component';\nimport { GridModule } from '../grid/grid.module';\nimport { IconModule } from '../icon/icon.module';\n\n@NgModule({\n  declarations: [\n    ExpanderComponent,\n    ExpanderHeaderComponent,\n    ExpanderBodyComponent,\n  ],\n  imports: [\n    CommonModule,\n    GridModule,\n    IconModule,\n  ],\n  exports: [\n    ExpanderComponent,\n    ExpanderHeaderComponent,\n    ExpanderBodyComponent,\n  ],\n})\nexport class ExpanderModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExpanderBodyComponent"
                        },
                        {
                            "name": "ExpanderComponent"
                        },
                        {
                            "name": "ExpanderHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "GridModule"
                        },
                        {
                            "name": "IconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExpanderBodyComponent"
                        },
                        {
                            "name": "ExpanderComponent"
                        },
                        {
                            "name": "ExpanderHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormsModule",
            "id": "module-FormsModule-88583cbd28b61ffc68868e1a46018848bf049fec631e82deb6aac8858eadd7b94934aea283ee61649921a0b1dcf03c443d66d497d362eaccbfa8e8f85f678870",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/forms/forms.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputModule } from './input/input.module';\nimport { LabelModule } from './label/label.module';\n\n@NgModule({\n  declarations: [\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    InputModule,\n    LabelModule,\n  ]\n})\nexport class FormsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputModule"
                        },
                        {
                            "name": "LabelModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GridModule",
            "id": "module-GridModule-0eb2bee082ce6d8b732a50070d95275fc3d90f3ef9fb735b21716cd79844d629ebb88a1e5e3e8f204750522dedd2af8e1ff26dba336b463333b99302262afbac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/grid/grid.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { GridComponent } from './grid.component';\nimport { GridColComponent } from './grid-col.component';\n\n@NgModule({\n  declarations: [\n    GridComponent,\n    GridColComponent,\n  ],\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n    GridComponent,\n    GridColComponent,\n  ],\n})\nexport class GridModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GridColComponent"
                        },
                        {
                            "name": "GridComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GridColComponent"
                        },
                        {
                            "name": "GridComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconModule",
            "id": "module-IconModule-48743403aa228d78ef3bb0a7838ae4de80136e32a5e3e38663475d0af8624a0386bd34b2ecd694396db9d9a7f699a5d85b5cb4b355b2b7f75aa2383d31040eb2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [\n    IconComponent,\n  ],\n  imports: [\n    CommonModule,\n    FontAwesomeModule,\n  ],\n  exports: [\n    IconComponent,\n  ],\n})\nexport class IconModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-92b6995b0dc654f3c18192b1234dc505e946be0cd066229e1d5ee7b715d7595e76849d6941bbeade5dd451b3e133ef87f81b272ca9f6fded9e271e81c88abf33",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/forms/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InputComponent } from './input.component';\nimport { FormsModule } from '@angular/forms';\nimport { LabelModule } from '../label/label.module';\n\n@NgModule({\n  declarations: [\n    InputComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    LabelModule,\n  ],\n  exports: [\n    InputComponent,\n  ]\n})\nexport class InputModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormsModule"
                        },
                        {
                            "name": "LabelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LabelModule",
            "id": "module-LabelModule-6898342551df2306e0238a09cd390f54581e296afc2bbfa36971adeb56e0df11a1f7ce5ae518b7742678beb6b6e4cde1c6d61d829362c9fadfd2e04c1ed6b1f2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/forms/label/label.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LabelComponent } from './label.component';\n\n@NgModule({\n  declarations: [\n    LabelComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    LabelComponent,\n  ]\n})\nexport class LabelModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LabelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModalModule",
            "id": "module-ModalModule-d5a7bb0a9c1f9065233db0136aef5feead5b068fe4c5040037cce2166749ccdd5418bdf43795bb2cc536921b51c82ef70c595d84b33deeb46969c6d6eb4f4f35",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/modal/modal.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { ModalComponent } from './modal.component';\nimport { ThemeModule } from '../theme/theme.module';\n\n@NgModule({\n  declarations: [\n    ModalComponent,\n  ],\n  imports: [\n    CommonModule,\n    PortalModule,\n    ThemeModule,\n  ],\n  exports: [\n    ModalComponent,\n  ],\n})\nexport class ModalModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ThemeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PanelModule",
            "id": "module-PanelModule-b59d70348192c1187508f3c0ec0fcb9deda2dcf41e283a3d494018f00d7f36f97159b90047712068eeecea5679c0618679cd7346268b6cd3d634af06cea5b111",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/panel/panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelComponent } from './panel.component';\n\n@NgModule({\n  declarations: [\n    PanelComponent,\n  ],\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n    PanelComponent,\n  ],\n})\nexport class PanelModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PlateModule",
            "id": "module-PlateModule-eae8303d2975fa436747138c88e5f0b9c0bc6b792d3c64a22781812eb36daaf4832ef99dcd772d1a0db394e6e679e1dd2d4e8628210e5873f9affffb07e73571",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/plate/plate.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PlateComponent } from './plate.component';\nimport { ThemeModule } from '../theme/theme.module';\n\n@NgModule({\n  declarations: [\n    PlateComponent,\n  ],\n  imports: [\n    CommonModule,\n    ThemeModule,\n  ],\n  exports: [\n    PlateComponent,\n  ],\n})\nexport class PlateModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PlateComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ThemeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PlateComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ThemeModule",
            "id": "module-ThemeModule-805a102cf78dfe4f518a3fe62939b836503b467d4a4c89e111634cc0927e00111aceb3836a535e132d8d534d7200c66780f000a8802e7ef6bd5a2d9de8620109",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/lukejamesk/core/src/lib/theme/theme.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ThemeComponent } from './theme.component';\n\n@NgModule({\n  declarations: [\n    ThemeComponent,\n  ],\n  imports: [\n    CommonModule,\n  ],\n  exports: [\n    ThemeComponent,\n  ],\n})\nexport class ThemeModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ThemeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ThemeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/panel/panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/plate/plate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/theme/theme.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/modal/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/expander/expander.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/grid/grid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  template: `\n    <ljk-theme [theme]=\"theme\">\n      <h1>This is a heading 1</h1>\n      <h2>This is a heading 2</h2>\n      <h3>This is a heading 3</h3>\n      <p>This is a paragraphy with some <strong>bolded</strong> text.</p>\n      <p>This is a paragraphy with some <strong>bolded</strong> text.</p>\n      <p>This is a paragraphy with some <strong>bolded</strong> text.</p>\n      <p>This is a paragraphy with some <strong>bolded</strong> text.</p>\n    </ljk-theme>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<literal type>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ljk-theme>\n      <ljk-button\n        [icon]=\"icon\"\n        [variant]=\"variant\"\n      >\n        This is a test\n      </ljk-button>\n    </ljk-theme>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/expander/expander.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template:`\n    <ljk-theme [theme]=\"theme\">\n      <ljk-expander id=\"TestExpander\" [(open)]=\"open\">\n        <ljk-expander-header>\n          The title\n        </ljk-expander-header>\n        <ljk-expander-body>\n          This is my content\n        </ljk-expander-body>\n      </ljk-expander>\n    </ljk-theme>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/grid/grid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template:`\n    <ljk-theme>\n      <ljk-grid>\n        <ljk-grid-col span=\"6\">\n          <ljk-panel>\n            Test item 1\n          </ljk-panel>\n        </ljk-grid-col>\n        <ljk-grid-col span=\"3\">\n          Test item 2\n        </ljk-grid-col>\n        <ljk-grid-col span=\"3\">\n          Test item 3\n        </ljk-grid-col>\n        <ljk-grid-col span=\"3\">\n          <ljk-panel>\n            Test item 1\n          </ljk-panel>\n        </ljk-grid-col>\n        <ljk-grid-col span=\"9\">\n          <ljk-theme theme=\"dark\">\n            <ljk-panel>\n              <ljk-grid>\n                <ljk-grid-col span=\"6\">\n                  <ljk-panel>\n                    Test item 1\n                  </ljk-panel>\n                </ljk-grid-col>\n                <ljk-grid-col span=\"6\">\n                  <ljk-panel>\n                    Test item 1\n                    <ljk-icon name=\"coffee\"></ljk-icon>\n                  </ljk-panel>\n                </ljk-grid-col>\n              </ljk-grid>\n            </ljk-panel>\n          </ljk-theme>\n        </ljk-grid-col>\n      </ljk-grid>\n    </ljk-theme>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/icon/icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<literal type>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ljk-theme>\n      <ljk-icon [name]=\"name\" [size]=\"size\"></ljk-icon>\n    </ljk-theme>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/panel/panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<literal type>",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ljk-theme [theme]=\"theme\">\n      <ljk-panel>\n        <h2>Faq</h2>\n        <ljk-expander [(open)]=\"q1\">\n          <ljk-expander-header>Question 1</ljk-expander-header>\n          <ljk-expander-body>My Answer</ljk-expander-body>\n        </ljk-expander>\n        <ljk-expander [(open)]=\"q2\">\n          <ljk-expander-header>Question 2</ljk-expander-header>\n          <ljk-expander-body>My Answer</ljk-expander-body>\n        </ljk-expander>\n        <ljk-expander [(open)]=\"q3\">\n          <ljk-expander-header>Question 3</ljk-expander-header>\n          <ljk-expander-body>My Answer</ljk-expander-body>\n        </ljk-expander>\n      </ljk-panel>\n    </ljk-theme>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/plate/plate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template:`\n    <ljk-theme [theme]=\"theme\">\n      <ljk-panel>\n        <ljk-grid>\n          <ljk-grid-col span=\"6\">\n            <ljk-plate>\n              <ljk-panel>\n                <p>This is my content</p>\n                <ljk-plate>\n                  <ljk-panel>\n                    <ljk-expander id=\"TestExpander\" [(open)]=\"open1\">\n                      <ljk-expander-header>\n                        Question 1\n                      </ljk-expander-header>\n                      <ljk-expander-body>\n                        This is my answer\n                      </ljk-expander-body>\n                    </ljk-expander>\n                    <p>This is my content</p>\n                    <ljk-plate>\n                      <ljk-panel>\n                        <p>This is my content</p>\n                      </ljk-panel>\n                    </ljk-plate>\n                  </ljk-panel>\n                </ljk-plate>\n              </ljk-panel>\n            </ljk-plate>\n          </ljk-grid-col>\n          <ljk-grid-col span=\"6\">\n            <ljk-plate>\n              <ljk-panel>\n                <ljk-expander id=\"TestExpander\" [(open)]=\"open2\">\n                  <ljk-expander-header>\n                    Question 2\n                  </ljk-expander-header>\n                  <ljk-expander-body>\n                    This is my content\n                  </ljk-expander-body>\n                </ljk-expander>\n              </ljk-panel>\n            </ljk-plate>\n          </ljk-grid-col>\n        </ljk-grid>\n      </ljk-panel>\n    </ljk-theme>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/theme/theme.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template:`\n    <ljk-theme [theme]=\"theme\">\n      <h1>Theme: {{theme}}</h1>\n      <ljk-grid>\n        <ljk-grid-col span=\"12\">\n          <ljk-panel>\n            <ljk-grid>\n              <ljk-grid-col span=\"12\">\n                <h3>This is my content</h3>\n                <ljk-button>Action 1</ljk-button>\n              </ljk-grid-col>\n            </ljk-grid>\n          </ljk-panel>\n        </ljk-grid-col>\n        <ljk-grid-col span=\"12\">\n          <ljk-theme theme=\"plate-1\">\n            <ljk-panel>\n              <h2>Theme: Plate 1</h2>\n              <p>And a dark theme content theme</p>\n              <ljk-button>Action 2</ljk-button>\n            </ljk-panel>\n          </ljk-theme>\n        </ljk-grid-col>\n        <ljk-grid-col span=\"12\">\n          <ljk-theme theme=\"plate-2\">\n            <ljk-panel>\n              <h2>Theme: Plate 2</h2>\n              <p>And a dark theme content theme</p>\n              <ljk-button>Action 2</ljk-button>\n            </ljk-panel>\n          </ljk-theme>\n        </ljk-grid-col>\n      </ljk-grid>\n    </ljk-theme>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/modal/modal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template:`\n    <ljk-theme [theme]=\"theme\">\n      <ljk-button (click)=\"open = !open\">Toggle Modal</ljk-button>\n      <ljk-modal [(open)]=\"open\">\n        <div class=\"p-m\">\n          <h2>Modal title</h2>\n          <p>This is my modal content</p>\n        </div>\n      </ljk-modal>\n    </ljk-theme>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<literal type>",
                "defaultValue": "(args) => {\n  const form = new FormGroup({\n    testInput: new FormControl(args.value),\n  });\n\n  return {\n    props: {\n      ...args,\n      form,\n    },\n    template:`\n      <ljk-theme [theme]=\"theme\">\n        <form [formGroup]=\"form\">\n          <ljk-input\n            id=\"TestInput\"\n            name=\"testInput\"\n            [label]=\"label\"\n            formControlName=\"testInput\"\n          ></ljk-input>\n        </form>\n      </ljk-theme>\n    `\n  };\n}"
            },
            {
                "name": "Tertiary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"tertiary\"",
                "file": "projects/lukejamesk/core/src/lib/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ColumnSpan",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"10\" | \"11\" | \"12\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"10\" | \"11\" | \"12\"",
                "file": "projects/lukejamesk/core/src/lib/grid/grid-col.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "IconName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "fasIconName",
                "file": "projects/lukejamesk/core/src/lib/icon/icon.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "IconSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"auto\" | \"s\" | \"m\" | \"l\"",
                "file": "projects/lukejamesk/core/src/lib/icon/icon.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Plate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"1\" | \"2\"",
                "file": "projects/lukejamesk/core/src/lib/plate/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Theme",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"light\" | \"dark\" | \"plate-1\" | \"plate-2\"",
                "file": "projects/lukejamesk/core/src/lib/theme/theme.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/lukejamesk/core/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/lukejamesk/core/src/lib/typography.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  template: `\n    <ljk-theme [theme]=\"theme\">\n      <h1>This is a heading 1</h1>\n      <h2>This is a heading 2</h2>\n      <h3>This is a heading 3</h3>\n      <p>This is a paragraphy with some <strong>bolded</strong> text.</p>\n      <p>This is a paragraphy with some <strong>bolded</strong> text.</p>\n      <p>This is a paragraphy with some <strong>bolded</strong> text.</p>\n      <p>This is a paragraphy with some <strong>bolded</strong> text.</p>\n    </ljk-theme>\n  `\n})"
                }
            ],
            "projects/lukejamesk/core/src/lib/icon/icon.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/icon/icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<literal type>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ljk-theme>\n      <ljk-icon [name]=\"name\" [size]=\"size\"></ljk-icon>\n    </ljk-theme>\n  `\n})"
                }
            ],
            "projects/lukejamesk/core/src/lib/panel/panel.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/panel/panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/panel/panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<literal type>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ljk-theme [theme]=\"theme\">\n      <ljk-panel>\n        <h2>Faq</h2>\n        <ljk-expander [(open)]=\"q1\">\n          <ljk-expander-header>Question 1</ljk-expander-header>\n          <ljk-expander-body>My Answer</ljk-expander-body>\n        </ljk-expander>\n        <ljk-expander [(open)]=\"q2\">\n          <ljk-expander-header>Question 2</ljk-expander-header>\n          <ljk-expander-body>My Answer</ljk-expander-body>\n        </ljk-expander>\n        <ljk-expander [(open)]=\"q3\">\n          <ljk-expander-header>Question 3</ljk-expander-header>\n          <ljk-expander-body>My Answer</ljk-expander-body>\n        </ljk-expander>\n      </ljk-panel>\n    </ljk-theme>\n  `\n})"
                }
            ],
            "projects/lukejamesk/core/src/lib/plate/plate.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/plate/plate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/plate/plate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template:`\n    <ljk-theme [theme]=\"theme\">\n      <ljk-panel>\n        <ljk-grid>\n          <ljk-grid-col span=\"6\">\n            <ljk-plate>\n              <ljk-panel>\n                <p>This is my content</p>\n                <ljk-plate>\n                  <ljk-panel>\n                    <ljk-expander id=\"TestExpander\" [(open)]=\"open1\">\n                      <ljk-expander-header>\n                        Question 1\n                      </ljk-expander-header>\n                      <ljk-expander-body>\n                        This is my answer\n                      </ljk-expander-body>\n                    </ljk-expander>\n                    <p>This is my content</p>\n                    <ljk-plate>\n                      <ljk-panel>\n                        <p>This is my content</p>\n                      </ljk-panel>\n                    </ljk-plate>\n                  </ljk-panel>\n                </ljk-plate>\n              </ljk-panel>\n            </ljk-plate>\n          </ljk-grid-col>\n          <ljk-grid-col span=\"6\">\n            <ljk-plate>\n              <ljk-panel>\n                <ljk-expander id=\"TestExpander\" [(open)]=\"open2\">\n                  <ljk-expander-header>\n                    Question 2\n                  </ljk-expander-header>\n                  <ljk-expander-body>\n                    This is my content\n                  </ljk-expander-body>\n                </ljk-expander>\n              </ljk-panel>\n            </ljk-plate>\n          </ljk-grid-col>\n        </ljk-grid>\n      </ljk-panel>\n    </ljk-theme>\n  `\n})"
                }
            ],
            "projects/lukejamesk/core/src/lib/theme/theme.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/theme/theme.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/theme/theme.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template:`\n    <ljk-theme [theme]=\"theme\">\n      <h1>Theme: {{theme}}</h1>\n      <ljk-grid>\n        <ljk-grid-col span=\"12\">\n          <ljk-panel>\n            <ljk-grid>\n              <ljk-grid-col span=\"12\">\n                <h3>This is my content</h3>\n                <ljk-button>Action 1</ljk-button>\n              </ljk-grid-col>\n            </ljk-grid>\n          </ljk-panel>\n        </ljk-grid-col>\n        <ljk-grid-col span=\"12\">\n          <ljk-theme theme=\"plate-1\">\n            <ljk-panel>\n              <h2>Theme: Plate 1</h2>\n              <p>And a dark theme content theme</p>\n              <ljk-button>Action 2</ljk-button>\n            </ljk-panel>\n          </ljk-theme>\n        </ljk-grid-col>\n        <ljk-grid-col span=\"12\">\n          <ljk-theme theme=\"plate-2\">\n            <ljk-panel>\n              <h2>Theme: Plate 2</h2>\n              <p>And a dark theme content theme</p>\n              <ljk-button>Action 2</ljk-button>\n            </ljk-panel>\n          </ljk-theme>\n        </ljk-grid-col>\n      </ljk-grid>\n    </ljk-theme>\n  `\n})"
                }
            ],
            "projects/lukejamesk/core/src/lib/modal/modal.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/modal/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/modal/modal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template:`\n    <ljk-theme [theme]=\"theme\">\n      <ljk-button (click)=\"open = !open\">Toggle Modal</ljk-button>\n      <ljk-modal [(open)]=\"open\">\n        <div class=\"p-m\">\n          <h2>Modal title</h2>\n          <p>This is my modal content</p>\n        </div>\n      </ljk-modal>\n    </ljk-theme>\n  `\n})"
                }
            ],
            "projects/lukejamesk/core/src/lib/forms/input/input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<literal type>",
                    "defaultValue": "(args) => {\n  const form = new FormGroup({\n    testInput: new FormControl(args.value),\n  });\n\n  return {\n    props: {\n      ...args,\n      form,\n    },\n    template:`\n      <ljk-theme [theme]=\"theme\">\n        <form [formGroup]=\"form\">\n          <ljk-input\n            id=\"TestInput\"\n            name=\"testInput\"\n            [label]=\"label\"\n            formControlName=\"testInput\"\n          ></ljk-input>\n        </form>\n      </ljk-theme>\n    `\n  };\n}"
                }
            ],
            "projects/lukejamesk/core/src/lib/button/button.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<literal type>",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `\n    <ljk-theme>\n      <ljk-button\n        [icon]=\"icon\"\n        [variant]=\"variant\"\n      >\n        This is a test\n      </ljk-button>\n    </ljk-theme>\n  `\n})"
                },
                {
                    "name": "Tertiary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/lukejamesk/core/src/lib/expander/expander.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/expander/expander.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/expander/expander.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template:`\n    <ljk-theme [theme]=\"theme\">\n      <ljk-expander id=\"TestExpander\" [(open)]=\"open\">\n        <ljk-expander-header>\n          The title\n        </ljk-expander-header>\n        <ljk-expander-body>\n          This is my content\n        </ljk-expander-body>\n      </ljk-expander>\n    </ljk-theme>\n  `\n})"
                }
            ],
            "projects/lukejamesk/core/src/lib/grid/grid.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/grid/grid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lukejamesk/core/src/lib/grid/grid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template:`\n    <ljk-theme>\n      <ljk-grid>\n        <ljk-grid-col span=\"6\">\n          <ljk-panel>\n            Test item 1\n          </ljk-panel>\n        </ljk-grid-col>\n        <ljk-grid-col span=\"3\">\n          Test item 2\n        </ljk-grid-col>\n        <ljk-grid-col span=\"3\">\n          Test item 3\n        </ljk-grid-col>\n        <ljk-grid-col span=\"3\">\n          <ljk-panel>\n            Test item 1\n          </ljk-panel>\n        </ljk-grid-col>\n        <ljk-grid-col span=\"9\">\n          <ljk-theme theme=\"dark\">\n            <ljk-panel>\n              <ljk-grid>\n                <ljk-grid-col span=\"6\">\n                  <ljk-panel>\n                    Test item 1\n                  </ljk-panel>\n                </ljk-grid-col>\n                <ljk-grid-col span=\"6\">\n                  <ljk-panel>\n                    Test item 1\n                    <ljk-icon name=\"coffee\"></ljk-icon>\n                  </ljk-panel>\n                </ljk-grid-col>\n              </ljk-grid>\n            </ljk-panel>\n          </ljk-theme>\n        </ljk-grid-col>\n      </ljk-grid>\n    </ljk-theme>\n  `\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/lukejamesk/core/src/lib/button/button.component.ts": [
                {
                    "name": "ButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"tertiary\"",
                    "file": "projects/lukejamesk/core/src/lib/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/lukejamesk/core/src/lib/grid/grid-col.component.ts": [
                {
                    "name": "ColumnSpan",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"10\" | \"11\" | \"12\" | \"1\" | \"2\" | \"3\" | \"4\" | \"5\" | \"6\" | \"7\" | \"8\" | \"9\" | \"10\" | \"11\" | \"12\"",
                    "file": "projects/lukejamesk/core/src/lib/grid/grid-col.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/lukejamesk/core/src/lib/icon/icon.component.ts": [
                {
                    "name": "IconName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "fasIconName",
                    "file": "projects/lukejamesk/core/src/lib/icon/icon.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                },
                {
                    "name": "IconSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"auto\" | \"s\" | \"m\" | \"l\"",
                    "file": "projects/lukejamesk/core/src/lib/icon/icon.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/lukejamesk/core/src/lib/plate/types.ts": [
                {
                    "name": "Plate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"1\" | \"2\"",
                    "file": "projects/lukejamesk/core/src/lib/plate/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/lukejamesk/core/src/lib/theme/theme.component.ts": [
                {
                    "name": "Theme",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"light\" | \"dark\" | \"plate-1\" | \"plate-2\"",
                    "file": "projects/lukejamesk/core/src/lib/theme/theme.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/lukejamesk/core/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tertiary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/expander/expander-body.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpanderBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/expander/expander-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpanderHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/expander/expander.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpanderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/expander/expander.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/expander/expander.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/forms/core/models/LjkFormControl.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LjkFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/forms/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/forms/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/forms/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/forms/label/label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/grid/grid-col.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridColComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/grid/grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/grid/grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/grid/grid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/icon/icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/modal/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/modal/modal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/panel/panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/panel/panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/panel/panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/plate/plate.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/plate/plate.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/plate/plate.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/theme/theme.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/theme/theme.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/theme/theme.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/lib/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lukejamesk/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}